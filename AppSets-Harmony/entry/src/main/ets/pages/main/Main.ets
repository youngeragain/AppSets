import prompt from '@ohos.prompt';
import promptAction from '@ohos.promptAction';
import common from '@ohos.app.ability.common';
import Want from '@ohos.app.ability.Want';
import router from '@ohos.router';
import NaviTabItem, { SampleTabAction } from './NaviTabItem';
import SimpleNaviTabItem from './NaviTabItem';
import StartPage from './start/StartPage';
import AppsCenterPage from './apps/AppsCenterPage';
import OutSidePage from './outside/OutSidePage';
import ConversationOverviewPage from './conversation/ConversationOverviewPage';
import List from '@ohos.util.List';
import MediaRemoteUseCase from '../../usecase/MediaRemoteUseCase';

@Entry
@Component
struct Main {
  @State routePage: string = "StartPage"
  @State navigationTabs: List<NaviTabItem> = new List<NaviTabItem>()
  scroller: Scroller = new Scroller()

  @Builder
  StandardSearchBar() {
    Row({ space: 12 }) {
      Row() {
        Image($r("app.media.search_FILL0_wght100_GRAD0_opsz24"))
          .width(32)
          .height(32)
          .backgroundColor(0xFFFFFF)
          .borderRadius(21)
      }.width(120).borderRadius(21).height(42)
      .padding({
        left:8, top:8, right:8, bottom:8
      }).backgroundColor(0xFFFFFF)

      Image($r("app.media.face_FILL0_wght100_GRAD0_opsz24"))
        .width(42)
        .height(42)
        .backgroundColor(0xFFFFFF)
        .borderRadius(21)
        .padding({
          left:8, top:8, right:8, bottom:8
        })

      Image($r("app.media.swap_calls_FILL0_wght100_GRAD0_opsz24"))
        .width(42)
        .height(42)
        .backgroundColor(0xFFFFFF)
        .borderRadius(21)
        .padding({
          left:8, top:8, right:8, bottom:8
        })
    }
  }

  @Builder
  TabItem(naviTabItem: NaviTabItem, event: (event?: ClickEvent) => void) {
    Column() {
      Image(naviTabItem.iconRes)
        .width(42)
        .height(42)
        .backgroundColor(0xFFFFFF)
        .borderRadius(21).padding({
         left:8, top:8, right:8, bottom:8
      })
      if (naviTabItem.showDescription) {
        Text(naviTabItem.name)
          .fontSize(16)
          .textAlign(TextAlign.Center)
      }

    }.onClick(event)
  }

  /**
   * In low-code mode, do not add anything to the build function, as it will be
   * overwritten by the content generated by the .visual file in the build phase.
   */
  build() {
    Column() {
      Stack() {
        if (this.routePage == "StartPage") {
          StartPage()
        } else if (this.routePage == "AppsCenterPage") {
          AppsCenterPage()
        } else if (this.routePage == "OutSidePage") {
          OutSidePage()
        } else if (this.routePage == "ConversationOverviewPage") {
          ConversationOverviewPage()
        }
      }.layoutWeight(1)

      Scroll(this.scroller) {
        Row({ space: 12 }) {
          ForEach(
            this.navigationTabs.convertToArray(),
            (item:NaviTabItem) => {
              this.TabItem(item, () => {
                this.routePage = item.routeName
              })
            },
            (item:NaviTabItem, index) => index.toString()
          )
          this.StandardSearchBar()
        }
      }
      .backgroundColor(0xd9e0ee)
      .width('100%')
      .height(86)
      .padding({ left: 12, bottom: 12, right: 12 })
      .scrollable(ScrollDirection.Horizontal) // 滚动方向纵向
      .scrollBar(BarState.Off) // 滚动条常驻显示
      .scrollBarColor(Color.Gray) // 滚动条颜色
      .scrollBarWidth(0) // 滚动条宽度
      .edgeEffect(EdgeEffect.Spring)
      .onScroll((xOffset: number, yOffset: number) => {
        console.info(xOffset + ' ' + yOffset)
      })
      .onScrollEdge((side: Edge) => {
        console.info('To the edge')
      })
      .onScrollStop(() => {
        console.info('Scroll Stop')
      })
      .onAppear(() => {
        console.info('size item:' + this.navigationTabs.length)
      })
    }
  }

  onPageShow() {

  }

  onPageHide() {

  }

  aboutToAppear() {
    let tabs = new List<NaviTabItem>()
    let appsTab = new SimpleNaviTabItem(
      "apps","AppsCenterPage",$r("app.media.shopping_bag_FILL0_wght100_GRAD0_opsz24")
    )

    let appsTabAction1 = new SampleTabAction("add_app", $r("app.media.shopping_bag_FILL0_wght100_GRAD0_opsz24"))
    appsTab.actions.add(appsTabAction1)

    let outSideTab = new SimpleNaviTabItem(
      "outside", "OutSidePage",$r("app.media.explore_FILL0_wght100_GRAD0_opsz24")
    )

    let conversationTab = new SimpleNaviTabItem(
      "conversion","ConversationOverviewPage",$r("app.media.bubble_chart_FILL0_wght100_GRAD0_opsz24")
    )
    tabs.add(appsTab)
    tabs.add(outSideTab)
    tabs.add(conversationTab)
    this.navigationTabs = tabs
  }

  aboutToDisappear() {

  }

  toLoginAbility() {
    let context = getContext(this) as common.UIAbilityContext;
    let thisBundleName = context.abilityInfo.bundleName
    promptAction.showToast({
      message: thisBundleName
    })
    let want = new Want()
    want.deviceId = ""// deviceId为空表示本设备
    want.bundleName = thisBundleName
    want.abilityName = "LoginAbility"
    want.moduleName = "entry"// moduleName非必选
    context.startAbility(want, (error) => {
      // 显式拉起Ability，通过bundleName、abilityName和moduleName可以唯一确定一个Ability
      console.log('error.code = ' + error.code + "++" + error.message)
    });
  }
}
