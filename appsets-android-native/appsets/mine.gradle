import javax.net.ssl.*
import java.nio.charset.Charset
import java.security.SecureRandom
import java.security.cert.CertificateException
import java.security.cert.X509Certificate

class BuildConfigRequiredValue {
    public def sslEnable = true
    public def apiHostAddress = "localhost"
    public def apiPort = 8080
    public def rabbitProperties = null
    public def appSetsAppId = null

    @Override
    String toString() {
        return "BuildConfigRequiredValue{" +
                "sslEnable=" + sslEnable +
                ", apiHostAddress=" + apiHostAddress +
                ", apiPort=" + apiPort +
                ", rabbitProperties=" + rabbitProperties +
                ", appSetsAppId=" + appSetsAppId +
                '}'
    }
    /**
     * @param map value is BuildConfigField
     */
    void updateBuildConfigFiledBeforeGenerateBuildConfig(Map<String, ?> mapProperty) {
        try {
            for (entry in mapProperty) {
                def declaredFieldValue = entry.value.getClass().getDeclaredField("value")
                declaredFieldValue.setAccessible(true)
                if ("SSLEnable" == entry.key) {
                    declaredFieldValue.set(entry.value, sslEnable)
                } else if ("RabbitProperties" == entry.key) {
                    declaredFieldValue.set(entry.value, "\"${rabbitProperties}\"")
                } else if ("CanSignUp" == entry.key) {
                    declaredFieldValue.set(entry.value, true)
                } else if ("AppSetsAppId" == entry.key) {
                    declaredFieldValue.set(entry.value, "\"${appSetsAppId}\"")
                } else if ("ApiPort" == entry.key) {
                    declaredFieldValue.set(entry.value, "\"${apiPort}\"")
                } else if ("ApiHostAddress" == entry.key) {
                    declaredFieldValue.set(entry.value, "\"${apiHostAddress}\"")
                }
            }
            println "updateEntryValue success when before generateBuildConfig"
        } catch (Exception e) {
            println "updateEntryValue error when before generateBuildConfig, exception is:" + e.message
        }

    }
}

ext {
    buildConfigRequiredValue = new BuildConfigRequiredValue()
}

ksp {
    def schemaLocation = getLocalProperty("room_schemaLocation")
    if (schemaLocation != null) {
        arg("room.schemaLocation", schemaLocation)
    }
}

def getLocalProperty(key) {
    try (InputStream inputStream = rootProject.file('local.properties').newDataInputStream()) {
        Properties properties = new Properties()
        properties.load(inputStream)
        if (properties.containsKey(key)) {
            return properties.getProperty(key)
        }
    } catch (Exception e) {
        println "getLocalProperty error, exception:" + e.message
    }
    return null
}

def getApiHost(buildTypeName) {
    if (buildTypeName == "debug") {
        def inetAddresses = Inet4Address.getAllByName(InetAddress.localHost.hostName)
        for (Inet4Address inet4Address : inetAddresses) {
            if (inet4Address.hostAddress.contains('.')) {
                def split = inet4Address.hostAddress.split("\\.")
                if ("0" == split[2]) {
                    return inet4Address.hostAddress
                }
            }
        }
        return "localhost"
    } else {
        return getLocalProperty(buildTypeName + "-api-host")
    }
}

def getApiPort(buildTypeName) {
    def apiPortString = getLocalProperty(buildTypeName + "-api-port")
    return Integer.parseInt(apiPortString)
}

def getAppSetsAppId(buildTypeName) {
    return getLocalProperty(buildTypeName + "-appsets-app-id")
}


def skipSsl() {
    try {
        def trustManager = new X509TrustManager() {
            @Override
            void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {

            }

            @Override
            void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {

            }

            @Override
            X509Certificate[] getAcceptedIssuers() {
                return new X509Certificate[0]
            }
        }
        def trustManagers = new TrustManager[]{trustManager}
        def secureRandom = new SecureRandom()
        def sslContext = SSLContext.getInstance("SSL")
        sslContext.init(null, trustManagers, secureRandom)

        HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory())
        def hostNameVerifier = new HostnameVerifier() {
            @Override
            boolean verify(String hostname, SSLSession session) {
                return true
            }
        }
        HttpsURLConnection.setDefaultHostnameVerifier(hostNameVerifier)
    } catch (Exception e) {
        println("skip ssl fail," + e.message)
    }
}

def getRabbitProperty(buildTypeName) {
    skipSsl()
    def inputStream = null
    try {
        def rabbitUrl = getLocalProperty(buildTypeName + "-rabbit-url")
        def url = new URL(rabbitUrl)
        def connection = url.openConnection()
        connection.addRequestProperty("92d51404b8b7903b", "admin")
        connection.doInput = true
        inputStream = connection.inputStream
        def jsonStr = new String(inputStream.readAllBytes(), Charset.forName("UTF-8"))
        if (jsonStr != null || jsonStr != "")
            return jsonStr
    } catch (ConnectException e) {
        println "getRabbitProperty Connection refused: connect" + e.message
    } finally {
        if (inputStream != null)
            inputStream.close()
    }
    return null
}

/*
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "17"
        freeCompilerArgs += [
                "-Xallow-jvm-ir-dependencies",
                "-P",
                "plugin:androidx.compose.compiler.plugins.kotlin:suppressKotlinVersionCompatibilityCheck=true"
        ]
    }
}*/

def makeBuildConfigRequiredValue(String buildTypeName) {
    buildConfigRequiredValue.apiHostAddress = getApiHost(buildTypeName)
    buildConfigRequiredValue.apiPort = getApiPort(buildTypeName)
    buildConfigRequiredValue.rabbitProperties = getRabbitProperty(buildTypeName)
    buildConfigRequiredValue.appSetsAppId = getAppSetsAppId(buildTypeName)
    println buildConfigRequiredValue
}

gradle.projectsEvaluated {
    project.gradle.taskGraph.whenReady {
        def tasksTreeMap = getAllTasks(true)
        def realTasksSet = (TreeSet) tasksTreeMap.get(tasksTreeMap.keySet()[0])
        def generateBuildConfigTasks = new HashSet<?>()
        for (i in 0..<realTasksSet.size()) {
            def task = realTasksSet[i]
            String taskName = task.getName()
            if (taskName != null &&
                    !taskName.contains("AndroidTest") &&
                    taskName.startsWith("generate") &&
                    taskName.endsWith("BuildConfig")) {
                generateBuildConfigTasks.add(task)
            }
        }
        generateBuildConfigTasks.forEach { task ->
            def buildTypeName = task.buildTypeName.get()
            task.doFirst {
                makeBuildConfigRequiredValue(buildTypeName)
                try {
                    def itemsField = task.getClass().getDeclaredField("__items__")
                    itemsField.setAccessible(true)
                    def mapProperty = itemsField.get(task).get()
                    buildConfigRequiredValue.updateBuildConfigFiledBeforeGenerateBuildConfig(mapProperty)
                } catch (Exception e) {
                    println "not found items in GenerateBuildConfig task " + e.message
                }
            }
        }
    }
}

